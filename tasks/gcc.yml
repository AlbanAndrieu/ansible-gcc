---
# This playbook contains common plays that will be run on all nodes.

- name: Include OS specific vars
  tags: gcc
  include_vars: "{{ ansible_os_family }}.yml"

- name: gcc | Install C++ toolchain PPA
  apt_repository: repo='ppa:ubuntu-toolchain-r/test' update_cache=yes
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  become: yes
  ignore_errors: true
  tags:
    - package
    - gcc

- name: gcc | Install C++ compiler (Debian based)
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ gcc_pkg_state|default('present') }}"
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  with_items:
   - gcc{{ gcc_version }}
   - g++{{ gcc_version }}
  become: yes
  tags:
    - package
    - gcc

#https://superuser.com/questions/381160/how-to-install-gcc-4-7-x-4-8-x-on-centos
#gcc 4.7.2
#So you could simply use his repo and install just gcc, instantly.
#cd /etc/yum.repos.d
#sudo wget http://people.centos.org/tru/devtools-1.1/devtools-1.1.repo
#sudo yum --enablerepo=testing-1.1-devtools-6 install devtoolset-1.1-gcc devtoolset-1.1-gcc-c++

#sudo wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repo
#sudo yum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++

#export CC=/opt/centos/devtoolset-1.1/root/usr/bin/gcc
#export CPP=/opt/centos/devtoolset-1.1/root/usr/bin/cpp
#export CXX=/opt/centos/devtoolset-1.1/root/usr/bin/c++

#sudo yum install devtoolset-1.1
#sudo yum install devtoolset-2 --skip-broken
#sudo yum install devtoolset-3

- name: gcc | Install C++ compiler (RedHat based)
  action: "{{ ansible_pkg_mgr}} name={{ item }} state={{ gcc_pkg_state|default('present') }}"
  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
  with_items:
   - gcc{{ gcc_version }}
   - gcc-c++{{ gcc_version }}
  become: yes
  tags:
    - package
    - gcc

- name: gcc | Set gcc link to gcc
  set_fact: gcc_dir=/usr/bin/
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

- name: gcc | Set gcc link to gcc version
  set_fact: cpp_version={{ gcc_version }}
#  when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

#- name: gcc | Set gcc link to gcc version
#  set_fact: cpp_version=4.4.7
#  when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'

- name: gcc | Display gcc link before
  action: command update-alternatives --display gcc
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
  changed_when: false
  become: yes
  ignore_errors: true
  tags:
    - alternatives
    - gcc
    - vm

#sudo update-alternatives --remove-all gcc
#sudo update-alternatives --remove-all cpp
#sudo update-alternatives --remove-all g++

#TODO : Waiting ansible 2.2 to manage priority https://docs.ansible.com/ansible/alternatives_module.html
# priority={{ item.priority }}
- name: gcc | Configure gcc alternatives
  alternatives: name={{ item.name }} link={{ item.link }} path={{ item.path }}
  with_items:
  - { name: gcc, link: /usr/bin/gcc, path: "{{ gcc_dir }}gcc{{ cpp_version }}", priority: "{{ gcc_priority }}" }
  - { name: cpp, link: /usr/bin/cpp, path: "{{ gcc_dir }}cpp{{ cpp_version }}", priority: "{{ gcc_priority }}" }
  - { name: g++, link: /usr/bin/g++, path: "{{ gcc_dir }}g++{{ cpp_version }}", priority: "{{ gcc_priority }}" }
#  - { name: gcc, link: /usr/bin/gcc, path: "{{ gcc_dir }}gcc-4.9", priority: "20" }
#  - { name: cpp, link: /usr/bin/cpp, path: "{{ gcc_dir }}cpp-4.9", priority: "20" }
#  - { name: g++, link: /usr/bin/g++, path: "{{ gcc_dir }}g++-4.9", priority: "20" }
#  - { name: gcc, link: /usr/bin/gcc, path: "{{ gcc_dir }}gcc-4.8", priority: "10" }
#  - { name: cpp, link: /usr/bin/cpp, path: "{{ gcc_dir }}cpp-4.8", priority: "10" }
#  - { name: g++, link: /usr/bin/g++, path: "{{ gcc_dir }}g++-4.8", priority: "10" }
#  - { name: gcc, link: /usr/bin/gcc, path: "{{ gcc_dir }}gcc-4.7", priority: "0" }
#  - { name: cpp, link: /usr/bin/cpp, path: "{{ gcc_dir }}cpp-4.7", priority: "0" }
#  - { name: g++, link: /usr/bin/g++, path: "{{ gcc_dir }}g++-4.7", priority: "0" }
#  - { name: gcc, link: /usr/bin/gcc, path: "{{ gcc_dir }}gcc-4.6", priority: "-10" }
#  - { name: cpp, link: /usr/bin/cpp, path: "{{ gcc_dir }}cpp-4.6", priority: "-10" }
#  - { name: g++, link: /usr/bin/g++, path: "{{ gcc_dir }}g++-4.6", priority: "-10" }
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
        and not( (gcc_dir is undefined) or (gcc_dir is none) or (gcc_dir | trim == '') )
        and not( (cpp_version is undefined) or (cpp_version is none) or (cpp_version | trim == '') )
        and ansible_distribution_version is version('18.10', '<=')
  become: yes
  tags:
    - alternatives
    - gcc
    - vm

#sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.9 40 --slave /usr/bin/gcc gcc /usr/bin/gcc-4.9
#sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.9 40 --slave /usr/bin/cpp cpp /usr/bin/cpp-4.9
#sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.9 40 --slave /usr/bin/g++ g++ /usr/bin/g++-4.9

#sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.8 30 --slave /usr/bin/gcc gcc /usr/bin/gcc-4.8
#sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.8 30 --slave /usr/bin/cpp cpp /usr/bin/cpp-4.8
#sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.8 30 --slave /usr/bin/g++ g++ /usr/bin/g++-4.8

#sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.7 20 --slave /usr/bin/gcc gcc /usr/bin/gcc-4.7
#sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.7 20 --slave /usr/bin/cpp cpp /usr/bin/cpp-4.7
#sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.7 20 --slave /usr/bin/g++ g++ /usr/bin/g++-4.7

#sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-4.6 10 --slave /usr/bin/gcc gcc /usr/bin/gcc-4.6
#sudo update-alternatives --install /usr/bin/cpp cpp /usr/bin/cpp-4.6 10 --slave /usr/bin/cpp cpp /usr/bin/cpp-4.6
#sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-4.6 10 --slave /usr/bin/g++ g++ /usr/bin/g++-4.6

#sudo update-alternatives --config gcc
#sudo update-alternatives --config cpp
#sudo update-alternatives --config g++

#sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 80 --slave /usr/bin/g++ g++ /usr/bin/g++-8 --slave /usr/bin/gcov gcov /usr/bin/gcov-8

- name: gcc | Configure gcc alternatives
  #action: command name={{ item.name }} link={{ item.link }} path={{ item.path }}
  action: command update-alternatives --install {{ gcc_dir }}/{{ item.name }} {{ item.name }} {{ item.link }}/gcc{{ item.version }} {{ gcc_priority }} --slave {{ item.link }}/g++ g++ {{ item.link }}/g++{{ item.version }} --slave {{ item.link }}/gcov gcov {{ item.link }}/gcov{{ item.version }}
  with_items:
  - { name: gcc, link: /usr/bin/, path: "{{ gcc_dir }}gcc{{ cpp_version }}", version: "{{ gcc_version }}", priority: "{{ gcc_priority }}" }
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
        and not( (gcc_dir is undefined) or (gcc_dir is none) or (gcc_dir | trim == '') )
        and not( (cpp_version is undefined) or (cpp_version is none) or (cpp_version | trim == '') )
        and ansible_distribution_version is version('19.04', '>=')
  become: yes
  tags:
    - alternatives
    - gcc
    - vm

#ls -la /etc/alternatives/gcc*
- name: gcc | Display gcc link after
  action: command update-alternatives --list gcc
  when: (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu')
        and not( (gcc_dir is undefined) or (gcc_dir is none) or (gcc_dir | trim == '') )
        and not( (cpp_version is undefined) or (cpp_version is none) or (cpp_version | trim == '') )
  become: yes
  ignore_errors: true
  tags:
    - alternatives
    - gcc
    - vm

- name: gcc | Install required packages
  action: "{{ ansible_pkg_mgr }} state={{ util_package_state|default('present') }} name={{ item }}"
  with_items: "{{ gcc_package_list }}"
  become: yes
  tags:
    - package
    - gcc
